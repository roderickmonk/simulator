Wrote profile results to simulate.py.lprof
Timer unit: 1e-06 s

Total time: 0.319864 s
File: ./Python/matching_engine.py
Function: match at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                               @profile
    79                                               def match(
    80                                                   self,
    81                                                   buy_rate: float,
    82                                                   sell_rate: float,
    83                                                   buy_trades: [dict],
    84                                                   sell_trades: [dict],
    85                                               ):
    86                                           
    87                                                   assert buy_rate > 0 and sell_rate > 0
    88                                           
    89      4826      10594.0      2.2      3.3          funds, inventory = self.assets
    90                                           
    91                                                   if __debug__:
    92                                                       logging.debug('buy_rate: %f, sell_rate: %f, IL: %f',
    93                                                                     buy_rate,
    94                                                                     sell_rate,
    95                                                                     self.IL)
    96                                           
    97                                                       logging.debug(
    98                                                           'QL: %f funds: %f, IL - inventory * sell_rate: %f',
    99                                                           self.QL,
   100                                                           funds,
   101                                                           self.IL - inventory * sell_rate)
   102                                           
   103                                                   # Take a snapshot of the assets;
   104                                                   # both buy and sell sides start with the same snapshot
   105      4826       2464.0      0.5      0.8          start_assets = self.assets
   106                                           
   107      4826       2277.0      0.5      0.7          buy_result = self.buy(
   108      4826       1831.0      0.4      0.6              start_assets=start_assets,
   109      4826       1686.0      0.3      0.5              buy_rate=buy_rate,
   110      4826       1662.0      0.3      0.5              sell_rate=sell_rate,
   111      4826     154337.0     32.0     48.3              sell_trades=sell_trades,
   112                                                   )
   113                                           
   114      4826       2578.0      0.5      0.8          sell_result = self.sell(
   115      4826       1804.0      0.4      0.6              start_assets=start_assets,
   116      4826       1705.0      0.4      0.5              sell_rate=sell_rate,
   117      4826     136645.0     28.3     42.7              buy_trades=buy_trades,
   118                                                   )
   119                                           
   120      4826       2281.0      0.5      0.7          return buy_result, sell_result

Total time: 0.101689 s
File: ./Python/matching_engine.py
Function: buy at line 122

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   122                                               @profile
   123                                               def buy(
   124                                                   self,
   125                                                   start_assets: np.array,
   126                                                   buy_rate: float,
   127                                                   sell_rate: float,
   128                                                   sell_trades: [dict],
   129                                               ) -> MatchResult:
   130                                           
   131      4826       5291.0      1.1      5.2          if len(sell_trades) == 0:
   132      2093       2526.0      1.2      2.5              self.buy_no_trades_count += 1
   133      2093       2908.0      1.4      2.9              return MatchResult.NO_TRADES
   134                                           
   135      2733       4079.0      1.5      4.0          funds, inventory = start_assets
   136                                           
   137      2733       3767.0      1.4      3.7          ceiling = self.IL - inventory * sell_rate
   138      2733       5053.0      1.8      5.0          quantity = min(self.QL, funds, ceiling)
   139                                           
   140                                                   """
   141                                                   if __debug__:
   142                                                       logging.debug ('ceiling: ' + str(ceiling))
   143                                                       logging.debug ('quantity: ' + str(quantity))
   144                                                   """
   145                                           
   146      2733       3407.0      1.2      3.4          if (ceiling <= 0 or funds <= 0):
   147                                           
   148      1251       1568.0      1.3      1.5              self.buy_blocked_count += 1
   149      1251       1750.0      1.4      1.7              return MatchResult.BLOCKED
   150                                           
   151      1482       1010.0      0.7      1.0          matched = False
   152      1482        993.0      0.7      1.0          match = 0
   153                                           
   154      3954       3415.0      0.9      3.4          for trade in sell_trades:
   155                                           
   156                                                       # Trades higher than rate are ignored
   157      2487       2997.0      1.2      2.9              if trade['r'] <= buy_rate:
   158                                           
   159        97         98.0      1.0      0.1                  if quantity <= 0:
   160        15          7.0      0.5      0.0                      if matched:
   161        15         15.0      1.0      0.0                          self.buy_match_count += 1
   162        15         19.0      1.3      0.0                          return MatchResult.MATCHED
   163                                                               else:
   164                                                                   self.buy_unmatchable_count += 1
   165                                                                   return MatchResult.UNMATCHABLE
   166                                           
   167        82        122.0      1.5      0.1                  base = min(quantity, trade['q'] * buy_rate)
   168        82         75.0      0.9      0.1                  quote = base/buy_rate
   169        82         80.0      1.0      0.1                  fee = quote * self.actual_fee_rate
   170        82         66.0      0.8      0.1                  notion = quote * buy_rate
   171                                           
   172                                                           # Ensure we meet the min notional
   173        82         92.0      1.1      0.1                  if notion < self.min_notional:
   174                                                               if matched:
   175                                                                   self.buy_match_count += 1
   176                                                                   return MatchResult.MATCHED
   177                                                               else:
   178                                                                   self.buy_notion_failure_count += 1
   179                                                                   return MatchResult.MIN_NOTIONAL_FAILURE
   180                                           
   181                                                           if __debug__:
   182                                                               logging.debug('actual_fee_rate: %f, base: %f, quote: %f, fee: %f',
   183                                                                             self.actual_fee_rate, base, quote, fee)
   184                                           
   185        82         60.0      0.7      0.1                  matched = True
   186                                           
   187        82        106.0      1.3      0.1                  self.trades_collection.insert({
   188        82         96.0      1.2      0.1                      "runId": sim_config.partition_config["runId"],
   189        82         74.0      0.9      0.1                      "simVersion": sim_config.partition_config["simVersion"],
   190        82         63.0      0.8      0.1                      "s": sim_config.partition_config["simId"],
   191        82         70.0      0.9      0.1                      "p": sim_config.partition_config["_id"],
   192        82         51.0      0.6      0.1                      "ceiling": ceiling,
   193        82         70.0      0.9      0.1                      "idx": self.sim_trades_idx,
   194        82         48.0      0.6      0.0                      "match": match,
   195        82        368.0      4.5      0.4                      "ts": datetime.now(),
   196        82         54.0      0.7      0.1                      "buy": True,
   197        82         66.0      0.8      0.1                      "o": sim_config.orderbook_id,
   198        82         76.0      0.9      0.1                      "t": trade['_id'],
   199        82         61.0      0.7      0.1                      "quantity": quantity,
   200        82         53.0      0.6      0.1                      "r": buy_rate,
   201        82         58.0      0.7      0.1                      "q": quote,
   202        82         72.0      0.9      0.1                      "b": -base,
   203        82         52.0      0.6      0.1                      "buyFee": fee,
   204        82      54455.0    664.1     53.6                      "historyTrade": trade,
   205                                                           })
   206                                           
   207        82        170.0      2.1      0.2                  quantity -= base
   208        82        951.0     11.6      0.9                  self.assets += [-base, quote-fee]
   209                                           
   210        82         91.0      1.1      0.1                  self.sim_trades_idx += 1
   211        82         61.0      0.7      0.1                  match += 1
   212                                           
   213      1467       1132.0      0.8      1.1          if matched:
   214        64         50.0      0.8      0.0              self.buy_match_count += 1
   215        64        107.0      1.7      0.1              return MatchResult.MATCHED
   216                                                   else:
   217      1403       1880.0      1.3      1.8              self.buy_unmatchable_count += 1
   218      1403       1956.0      1.4      1.9              return MatchResult.UNMATCHABLE

Total time: 0.088109 s
File: ./Python/matching_engine.py
Function: sell at line 220

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   220                                               @profile
   221                                               def sell(
   222                                                   self,
   223                                                   start_assets: np.array,
   224                                                   sell_rate: float,
   225                                                   buy_trades: [dict],
   226                                               ) -> MatchResult:
   227                                           
   228      4826       8629.0      1.8      9.8          _, inventory = start_assets
   229                                           
   230      4826       4454.0      0.9      5.1          if len(buy_trades) == 0:
   231                                           
   232      2586       2348.0      0.9      2.7              self.sell_no_trades_count += 1
   233      2586       2168.0      0.8      2.5              return MatchResult.NO_TRADES
   234                                           
   235      2240       4553.0      2.0      5.2          quantity = min(self.QL, inventory * sell_rate)
   236                                           
   237      2240       2252.0      1.0      2.6          if quantity <= 0:
   238       587        718.0      1.2      0.8              self.sell_blocked_count += 1
   239       587        539.0      0.9      0.6              return MatchResult.BLOCKED
   240                                           
   241      1653       1114.0      0.7      1.3          matched = False
   242      1653       1083.0      0.7      1.2          match = 0
   243                                           
   244      4871       4136.0      0.8      4.7          for trade in buy_trades:
   245                                           
   246                                                       # Trades lower than rate are ignored
   247      3232       3813.0      1.2      4.3              if trade['r'] >= sell_rate:
   248                                           
   249        82         78.0      1.0      0.1                  if quantity <= 0:
   250                                           
   251        14         12.0      0.9      0.0                      if matched:
   252        14         14.0      1.0      0.0                          self.sell_match_count += 1
   253        14         21.0      1.5      0.0                          return MatchResult.MATCHED
   254                                           
   255                                                               else:
   256                                                                   self.sell_unmatchable_count += 1
   257                                                                   return MatchResult.UNMATCHABLE
   258                                           
   259        68         97.0      1.4      0.1                  base = min(quantity, trade['q'] * sell_rate)
   260        68         70.0      1.0      0.1                  quote = base / sell_rate
   261        68         65.0      1.0      0.1                  fee = base * self.actual_fee_rate
   262        68         54.0      0.8      0.1                  notion = quote * sell_rate
   263                                           
   264                                                           """
   265                                                           if __debug__:
   266                                                               logging.debug(f'base: {base}, quote: {quote}, fee: {fee}, notion: {notion}')
   267                                                           """
   268                                           
   269                                                           # Ensure we meet the min notional
   270        68         80.0      1.2      0.1                  if notion < self.min_notional:
   271                                                               if matched:
   272                                                                   self.sell_match_count += 1
   273                                                                   return MatchResult.MATCHED
   274                                                               else:
   275                                                                   self.sell_notion_failure_count += 1
   276                                                                   return MatchResult.MIN_NOTIONAL_FAILURE
   277                                           
   278        68         51.0      0.8      0.1                  matched = True
   279                                           
   280        68         84.0      1.2      0.1                  self.trades_collection.insert({
   281        68         82.0      1.2      0.1                      "runId": sim_config.partition_config["runId"],
   282        68         61.0      0.9      0.1                      "simVersion": sim_config.partition_config["simVersion"],
   283        68         56.0      0.8      0.1                      "s": sim_config.partition_config["simId"],
   284        68         45.0      0.7      0.1                      "p": sim_config.partition_config["_id"],
   285        68         58.0      0.9      0.1                      "idx": self.sim_trades_idx,
   286        68         51.0      0.8      0.1                      "match": match,
   287        68        308.0      4.5      0.3                      "ts": datetime.now(),
   288        68         44.0      0.6      0.0                      "buy": False,
   289        68         51.0      0.8      0.1                      "o": sim_config.orderbook_id,
   290        68         57.0      0.8      0.1                      "t": trade['_id'],
   291        68         48.0      0.7      0.1                      "quantity": quantity,
   292        68         50.0      0.7      0.1                      "r": sell_rate,
   293        68         59.0      0.9      0.1                      "q": -quote,
   294        68         46.0      0.7      0.1                      "b": base,
   295        68         51.0      0.8      0.1                      "sellFee": fee,
   296        68      44711.0    657.5     50.7                      "historyTrade": trade,
   297                                                           })
   298                                           
   299        68        145.0      2.1      0.2                  quantity -= base
   300        68        787.0     11.6      0.9                  self.assets += [base-fee, -quote]
   301                                           
   302        68         76.0      1.1      0.1                  self.sim_trades_idx += 1
   303        68         54.0      0.8      0.1                  match += 1
   304                                           
   305      1639       1327.0      0.8      1.5          if matched:
   306        54         51.0      0.9      0.1              self.sell_match_count += 1
   307        54         80.0      1.5      0.1              return MatchResult.MATCHED
   308                                                   else:
   309      1585       1930.0      1.2      2.2              self.sell_unmatchable_count += 1
   310      1585       1448.0      0.9      1.6              return MatchResult.UNMATCHABLE

Total time: 0.597877 s
File: ./Python/orderbooks.py
Function: next at line 255

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   255                                               @profile
   256                                               def next(self):
   257                                           
   258      5036       2956.0      0.6      0.5          while True:
   259                                           
   260      5036     433562.0     86.1     72.5              orderbook = self.iter.next()
   261                                           
   262      5035       3125.0      0.6      0.5              if orderbook == None:
   263                                                           raise StopIteration
   264                                           
   265                                                       assert "s" in orderbook
   266                                           
   267      5035       3734.0      0.7      0.6              if orderbook["s"] == True:
   268                                           
   269                                                           # Snapshot
   270      5035      12666.0      2.5      2.1                  self.buy_orderbook = orderbook["buy"]
   271      5035      11720.0      2.3      2.0                  self.sell_orderbook = orderbook["sell"]
   272                                           
   273                                                       else:
   274                                           
   275                                                           # Delta
   276                                                           self.apply_deltas(orderbook)
   277                                           
   278                                                           orderbook["buy"] = self.buy_orderbook
   279                                                           orderbook["sell"] = self.sell_orderbook
   280                                           
   281                                                       # First orderbooks not needed
   282      5035      28012.0      5.6      4.7              if self.start.replace(tzinfo=None) <= orderbook["ts"].replace(tzinfo=None):
   283      5035       2345.0      0.5      0.4                  break
   284                                           
   285                                                   # Sanity check: best buy strictly less than best sell
   286                                                   assert orderbook["buy"][0][0] < orderbook["sell"][0][0]
   287                                           
   288      5035      59252.0     11.8      9.9          orderbook["buy"] = np.array(orderbook["buy"], dtype=float)
   289      5035      38336.0      7.6      6.4          orderbook["sell"] = np.array(orderbook["sell"], dtype=float)
   290                                           
   291                                                   assert len(orderbook["buy"]) > 0
   292                                                   assert len(orderbook["sell"]) > 0
   293                                           
   294      5035       2169.0      0.4      0.4          return orderbook

Total time: 8.18955 s
File: ./Python/simulate.py
Function: simulate at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def simulate():
    70                                           
    71         1          6.0      6.0      0.0      matching_engine: MatchingEngine = None
    72         1          4.0      4.0      0.0      CO_calls = 0
    73         1          4.0      4.0      0.0      matching_engine_calls = 0
    74         1          4.0      4.0      0.0      returncode = 0
    75         1          8.0      8.0      0.0      max_time_diffs = np.array([])
    76         1          4.0      4.0      0.0      last_ob_timestamp = None
    77                                           
    78         1          4.0      4.0      0.0      buy_trades_count = 0
    79         1          3.0      3.0      0.0      sell_trades_count = 0
    80                                           
    81         1          3.0      3.0      0.0      try:
    82                                           
    83         1          6.0      6.0      0.0          logging.basicConfig(
    84         1          4.0      4.0      0.0              format='%(asctime)s %(levelname)-8s %(message)s',
    85         1          4.0      4.0      0.0              level=logging.INFO,
    86         1        106.0    106.0      0.0              datefmt='%Y-%m-%d %H:%M:%S')
    87                                           
    88         1         25.0     25.0      0.0          logging.debug(f'simulate args: {sys.argv}')
    89                                           
    90         1          4.0      4.0      0.0          if len(sys.argv) == 2:
    91         1         17.0     17.0      0.0              partition_id = ObjectId(sys.argv[1])
    92                                                   else:
    93                                                       assert False, 'Usage: simulate <Simulation ObjectId>'
    94                                           
    95         1         18.0     18.0      0.0          logging.debug('partition_id: ' + str(partition_id))
    96                                           
    97                                                   assert os.environ['MONGODB'], 'MONGODB Not Defined'
    98         1       4684.0   4684.0      0.1          remote_mongo_client = MongoClient(os.environ['MONGODB'])
    99                                           
   100                                                   assert os.environ['SIMULATOR_DB'], 'SIMULATOR_DB Not Defined'
   101         1         57.0     57.0      0.0          sim_db = remote_mongo_client[os.environ['SIMULATOR_DB']]
   102         1         60.0     60.0      0.0          sim_config.partition_config = sim_db.partitions.find_one(
   103                                                       {
   104         1      12824.0  12824.0      0.2                  "_id": partition_id
   105                                                       }
   106                                                   )
   107                                           
   108         1          5.0      5.0      0.0          logging.debug('sim_config.partition_config:\n' +
   109         1         51.0     51.0      0.0                        str(sim_config.partition_config))
   110                                           
   111         1          4.0      4.0      0.0          if sim_config.partition_config == None:
   112                                                       raise Exception('Unknown Trader Configuration')
   113                                           
   114                                                   # If simId is 0, then it is a stand alone subprocess test run
   115         1          9.0      9.0      0.0          if sim_config.partition_config["simId"] == '0':
   116                                                       sim_config.partition_config["simId"] = ObjectId()
   117                                           
   118         1          4.0      4.0      0.0          start = sim_config.partition_config["startTime"]
   119         1          4.0      4.0      0.0          end = sim_config.partition_config["endTime"]
   120                                           
   121         1         72.0     72.0      0.0          trades = remote_mongo_client.history.trades
   122                                           
   123         1         33.0     33.0      0.0          pdf = sim_db.PDFs.find_one(
   124                                                       filter={
   125         1        898.0    898.0      0.0                  "name": sim_config.partition_config["pdf"]
   126                                                       }
   127                                                   )
   128                                           
   129         1         17.0     17.0      0.0          sim_config.pdf_x = np.array(pdf["x"])
   130                                                   assert len(sim_config.pdf_x) > 0
   131                                           
   132         1         17.0     17.0      0.0          sim_config.pdf_y = np.array(pdf["y"])
   133                                                   assert len(sim_config.pdf_y) > 0
   134                                           
   135                                                   assert sim_config.pdf_x.shape == sim_config.pdf_y.shape
   136                                           
   137         1         45.0     45.0      0.0          sim_config.pdf_x = np.power(10, sim_config.pdf_x)
   138                                           
   139         1          4.0      4.0      0.0          QL = sim_config.partition_config['quantityLimit']
   140         1          4.0      4.0      0.0          IL = sim_config.partition_config['inventoryLimit']
   141                                           
   142                                                   sim_config.rate_precision = - \
   143         1         10.0     10.0      0.0              int(numpy.log10(sim_config.partition_config['tick']))
   144                                           
   145                                                   sim_config.quantity_precision = - \
   146         1          6.0      6.0      0.0              int(numpy.log10(sim_config.partition_config['tick']))
   147                                           
   148                                                   assert sim_config.partition_config["minNotional"], "Min Notional Missing"
   149                                           
   150                                                   # Count the number of source orderbooks
   151         1          4.0      4.0      0.0          source_orderbooks = Orderbooks.count_orderbooks(
   152         1          4.0      4.0      0.0              0,
   153         1          3.0      3.0      0.0              'bittrex',
   154         1          4.0      4.0      0.0              'btc-eth',
   155         1          4.0      4.0      0.0              start,
   156         1          4.0      4.0      0.0              end,
   157         1      10723.0  10723.0      0.1              sim_db.orderbooks
   158                                                   )
   159                                           
   160         1        346.0    346.0      0.0          logging.info(f'Total Source Orderbooks: {source_orderbooks}')
   161                                           
   162         1          5.0      5.0      0.0          matching_engine = MatchingEngine(
   163                                           
   164         1         14.0     14.0      0.0              assets=np.array([math.inf, 0], dtype=float),
   165         1          4.0      4.0      0.0              QL=QL,
   166         1          3.0      3.0      0.0              IL=IL,
   167         1          5.0      5.0      0.0              actual_fee_rate=sim_config.partition_config["actualFeeRate"],
   168         1          3.0      3.0      0.0              min_notional=sim_config.partition_config["minNotional"],
   169         1         55.0     55.0      0.0              trades_collection=sim_db.trades,
   170                                                   )
   171                                           
   172         1         21.0     21.0      0.0          logging.debug(f'start: {start}')
   173         1         11.0     11.0      0.0          logging.debug(f'end: {end}')
   174                                           
   175         1       4518.0   4518.0      0.1          sim_config.init(sim_config.partition_config)
   176                                           
   177         1        235.0    235.0      0.0          logging.info('trader: ' + str(sim_config.partition_config["trader"]))
   178                                           
   179                                                   if __debug__:
   180                                                       from CO1 import Trader
   181                                                       trader = Trader(sim_config)
   182                                           
   183                                                   else:
   184         1          4.0      4.0      0.0              trader = importlib.import_module(
   185         1        104.0    104.0      0.0                  sim_config.partition_config["trader"]).Trader(sim_config)
   186                                           
   187         1          4.0      4.0      0.0          try:
   188         1          4.0      4.0      0.0              orderbooks = Orderbooks(
   189         1         44.0     44.0      0.0                  orderbooks_collection=sim_db.orderbooks,
   190         1          4.0      4.0      0.0                  envId=sim_config.partition_config["envId"],
   191         1          5.0      5.0      0.0                  exchange=sim_config.partition_config["exchange"].lower(),
   192         1          4.0      4.0      0.0                  market=sim_config.partition_config["market"].lower(),
   193         1          4.0      4.0      0.0                  depth=sim_config.partition_config["depth"],
   194         1          4.0      4.0      0.0                  start=start,
   195         1       3687.0   3687.0      0.0                  end=end,
   196                                                       )
   197                                           
   198                                                   except StopIteration:
   199                                                       os._exit(0)
   200                                           
   201         1          4.0      4.0      0.0          orderbook = None
   202                                           
   203         1          3.0      3.0      0.0          total_orderbooks = 0
   204         1          4.0      4.0      0.0          last_ob_timestamp = None
   205                                           
   206         1          3.0      3.0      0.0          try:
   207                                           
   208         1          4.0      4.0      0.0              while True:
   209                                           
   210      5036     665134.0    132.1      8.1                  orderbook = orderbooks.next()
   211                                           
   212                                                           # Record the 3 largest OB gaps
   213      5035      14737.0      2.9      0.2                  if last_ob_timestamp != None:
   214                                           
   215      5034      15084.0      3.0      0.2                      ob_time_diff = orderbook["ts"] - last_ob_timestamp
   216      5034      13877.0      2.8      0.2                      max_time_diffs = np.sort(
   217      5034     135417.0     26.9      1.7                          np.append(max_time_diffs, ob_time_diff))[::-1][0:3]
   218                                           
   219      5035      13976.0      2.8      0.2                  last_ob_timestamp = orderbook["ts"]
   220                                           
   221      5035      13393.0      2.7      0.2                  total_orderbooks += 1
   222                                           
   223      5035      16276.0      3.2      0.2                  sim_config.orderbook_id = orderbook['_id']
   224                                           
   225      5035      16942.0      3.4      0.2                  buy_trades = orderbook["buy_trades"]
   226                                                           assert all(buy_trades[i]["r"] >= buy_trades[i+1]["r"]
   227                                                                      for i in range(len(buy_trades)-1)), 'Buy Trades Not Sorted'
   228      5035      14732.0      2.9      0.2                  buy_trades_count += len(buy_trades)
   229                                           
   230      5035      18458.0      3.7      0.2                  sell_trades = orderbook["sell_trades"]
   231                                                           assert all(sell_trades[i]["r"] <= sell_trades[i+1]["r"]
   232                                                                      for i in range(len(sell_trades)-1)), 'Sell Trades Not Sorted'
   233      5035      15501.0      3.1      0.2                  sell_trades_count += len(sell_trades)
   234                                           
   235                                                           assert len(buy_trades) > 0 or len(sell_trades) > 0
   236                                           
   237      5035      14809.0      2.9      0.2                  if (__debug__ and
   238                                                                   (
   239                                                                       len(buy_trades) > 0 or
   240                                                                       len(sell_trades) > 0
   241                                                                   )
   242                                                               ):
   243                                                               logging.debug('len(buy_trades): ' + str(len(buy_trades)))
   244                                                               logging.debug('len(sell_trades): ' + str(len(sell_trades)))
   245                                           
   246      5035      13840.0      2.7      0.2                  CO_calls += 1
   247                                           
   248                                                           market_rate = (
   249      5035      17648.0      3.5      0.2                      orderbook['buy'][0][0] +
   250      5035      18817.0      3.7      0.2                      orderbook['sell'][0][0]
   251      5035      20008.0      4.0      0.2                  ) / 2
   252                                           
   253      5035      14517.0      2.9      0.2                  depth = sim_config.partition_config["depth"]
   254                                           
   255                                                           buyob = Orderbooks.apply_depth(depth, orderbook['buy']) \
   256      5035     200473.0     39.8      2.4                      if depth > 0 else orderbook['buy']
   257      5035      56117.0     11.1      0.7                  buyob[:, 1] *= market_rate
   258                                           
   259                                                           sellob = Orderbooks.apply_depth(depth, orderbook['sell']) \
   260      5035     149948.0     29.8      1.8                      if depth > 0 else orderbook['sell']
   261      5035      35720.0      7.1      0.4                  sellob[:, 1] *= market_rate
   262                                           
   263      5035    4062208.0    806.8     49.6                  result = trader.compute_orders(buyob=buyob, sellob=sellob)
   264                                           
   265      5035      15350.0      3.0      0.2                  status, explain, buy_rate, sell_rate = result
   266                                           
   267      5035      17936.0      3.6      0.2                  if buy_rate > 0 and sell_rate > 0:
   268                                           
   269      4826      13138.0      2.7      0.2                      matching_engine_calls += 1
   270                                           
   271      4826      13504.0      2.8      0.2                      buy_match, sell_match = matching_engine.match(
   272      4826      12221.0      2.5      0.1                          buy_rate=buy_rate,
   273      4826      12221.0      2.5      0.1                          sell_rate=sell_rate,
   274      4826      12299.0      2.5      0.2                          buy_trades=buy_trades,
   275      4826     372839.0     77.3      4.6                          sell_trades=sell_trades,
   276                                                               )
   277                                           
   278      4826      17572.0      3.6      0.2                      funds, inventory = matching_engine.assets
   279                                           
   280                                                               if __debug__:
   281                                                                   logging.debug(f'compute_orders return: {result}')
   282                                                                   logging.debug('buy_match: ' + str(buy_match))
   283                                                                   logging.debug('sell_match: ' + str(sell_match))
   284                                           
   285      4826      13207.0      2.7      0.2                      buy_depth = sum(map(
   286      4826      13620.0      2.8      0.2                          lambda x: x[1] if x[0] > buy_rate else 0,
   287      4826     114544.0     23.7      1.4                          buyob))
   288                                           
   289      4826      12682.0      2.6      0.2                      sell_depth = sum(
   290      4826      12521.0      2.6      0.2                          map(
   291      4826      12933.0      2.7      0.2                              lambda x: x[1] if x[0] < sell_rate else 0,
   292      4826     102910.0     21.3      1.3                              sellob))
   293                                           
   294      4826     153984.0     31.9      1.9                      sim_db.matchings.insert({
   295      4826      15362.0      3.2      0.2                          "runId": sim_config.partition_config["runId"],
   296      4826      13087.0      2.7      0.2                          "simVersion": sim_config.partition_config["simVersion"],
   297      4826      12797.0      2.7      0.2                          "e": sim_config.partition_config["envId"],
   298      4826      13019.0      2.7      0.2                          "x": sim_config.partition_config["exchange"],
   299      4826      13126.0      2.7      0.2                          "m": sim_config.partition_config["market"],
   300      4826      12875.0      2.7      0.2                          "s": sim_config.partition_config["simId"],
   301      4826      12921.0      2.7      0.2                          "p": sim_config.partition_config["_id"],
   302      4826      12824.0      2.7      0.2                          "depth": sim_config.partition_config["depth"],
   303      4826      13224.0      2.7      0.2                          "ob": orderbook['_id'],
   304      4826      31019.0      6.4      0.4                          "ts": datetime.now(),
   305      4826      16807.0      3.5      0.2                          "topBuy": orderbook['buy'][0][0],
   306      4826      12346.0      2.6      0.2                          "buyRate": buy_rate,
   307      4826      13160.0      2.7      0.2                          "buyCount": len(buy_trades),
   308      4826      28410.0      5.9      0.3                          "buyMatch": str(buy_match).split('.')[1],
   309      4826      12499.0      2.6      0.2                          "buyDepth": buy_depth,
   310                                                                   "buys": list(map((lambda x: x["r"]), buy_trades))
   311      4826      18453.0      3.8      0.2                          if len(buy_trades) > 0 else None,
   312      4826      15670.0      3.2      0.2                          "topSell": orderbook['sell'][0][0],
   313      4826      12467.0      2.6      0.2                          "sellRate": sell_rate,
   314      4826      12817.0      2.7      0.2                          "sellCount": len(sell_trades),
   315      4826      19193.0      4.0      0.2                          "sellMatch": str(sell_match).split('.')[1],
   316      4826      12513.0      2.6      0.2                          "sellDepth": sell_depth,
   317                                                                   "sells": list(map((lambda x: x["r"]), sell_trades))
   318      4826      19356.0      4.0      0.2                          if len(sell_trades) > 0 else None,
   319      4826      12520.0      2.6      0.2                          "funds": funds,
   320      4826      19665.0      4.1      0.2                          "inventory": inventory,
   321      4826    1291863.0    267.7     15.8                      }, w=0, j=False)
   322                                           
   323         1          3.0      3.0      0.0          except StopIteration:
   324                                                       # logging.info('StopIteration Detected')
   325         1          4.0      4.0      0.0              returncode = 0
   326                                           
   327                                                   except KeyError as err:
   328                                                       logging.error('KeyError Detected: %r', err)
   329                                                       logging.exception('Exception: %s', err)
   330                                                       returncode = 1
   331                                           
   332                                               except Exception as err:
   333                                                   logging.exception('Exception: %s', err)
   334                                           
   335                                               except:
   336                                                   logging.exception('Unknown Exception')
   337                                           
   338                                               finally:
   339                                           
   340         1        178.0    178.0      0.0          logging.info(f'CO Calls: {CO_calls}')
   341         1         82.0     82.0      0.0          logging.info(f'buy_trades_count: {buy_trades_count}')
   342         1         72.0     72.0      0.0          logging.info(f'sell_trades_count: {sell_trades_count}')
   343         1         68.0     68.0      0.0          logging.info(f'Matching Engine Calls: {matching_engine_calls}')
   344         1          3.0      3.0      0.0          logging.info(
   345         1         67.0     67.0      0.0              f'buy_blocked_count: {matching_engine.buy_blocked_count}')
   346         1          2.0      2.0      0.0          logging.info(
   347         1         66.0     66.0      0.0              f'buy_no_trades_count: {matching_engine.buy_no_trades_count}')
   348         1          3.0      3.0      0.0          logging.info(
   349         1         65.0     65.0      0.0              f'buy_notion_failure_count: {matching_engine.buy_notion_failure_count}')
   350         1         65.0     65.0      0.0          logging.info(f'buy_match_count: {matching_engine.buy_match_count}')
   351         1          2.0      2.0      0.0          logging.info(
   352         1         64.0     64.0      0.0              f'buy_unmatchable_count: {matching_engine.buy_unmatchable_count}')
   353                                           
   354         1          3.0      3.0      0.0          logging.info(
   355         1         64.0     64.0      0.0              f'sell_blocked_count: {matching_engine.sell_blocked_count}')
   356         1          2.0      2.0      0.0          logging.info(
   357         1         63.0     63.0      0.0              f'sell_no_trades_count: {matching_engine.sell_no_trades_count}')
   358         1          3.0      3.0      0.0          logging.info(
   359         1         64.0     64.0      0.0              f'sell_notion_failure_count: {matching_engine.sell_notion_failure_count}')
   360         1         63.0     63.0      0.0          logging.info(f'sell_match_count: {matching_engine.sell_match_count}')
   361         1          3.0      3.0      0.0          logging.info(
   362         1         63.0     63.0      0.0              f'sell_unmatchable_count: {matching_engine.sell_unmatchable_count}')
   363                                           
   364         1          3.0      3.0      0.0          logging.info(
   365         1         63.0     63.0      0.0              'Largest Gaps Between Orderbooks (Hours:Minutes:Seconds)')
   366                                           
   367         4         15.0      3.8      0.0          for time_diff in max_time_diffs:
   368         3         19.0      6.3      0.0              total_minutes = time_diff.total_seconds() // 60
   369         3          9.0      3.0      0.0              logging.info(
   370         3          8.0      2.7      0.0                  '    -> %04d:%02d:%02d',
   371         3          8.0      2.7      0.0                  total_minutes // 60,
   372         3          8.0      2.7      0.0                  total_minutes % 60,
   373         3        206.0     68.7      0.0                  time_diff.total_seconds() % 60)
   374                                           
   375         1         67.0     67.0      0.0          logging.info(f'Total Orderbooks: {total_orderbooks}')
   376         1         73.0     73.0      0.0          logging.info(f'Last OB Timestamp: {last_ob_timestamp}')
   377         1         10.0     10.0      0.0          sys.exit(returncode)

Total time: 2.19712 s
File: /home/ubuntu/simulator/traders/CO1.py
Function: evol at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                               @profile
    41                                               def evol(self, pv: np.ndarray):
    42                                                   """
    43                                                   Calculate the expected volume for a potential order.
    44                                           
    45                                                   The histrogam approximates the probability discreet distribution of
    46                                                   market order (MO) sizes. For example, MOs of size = 0.1 BTC
    47                                                   occur more frequently than those of size = 1.0 BTC.
    48                                                   pv is the preceding volume; the amount of volume ahead of our order
    49                                                   on the OB.
    50                                                   """
    51                                           
    52                                                   assert self.pdf_x.shape == self.pdf_y.shape
    53                                           
    54     10070       8629.0      0.9      0.4          ev = [np.sum(
    55                                                       np.minimum(
    56                                                           np.maximum(self.pdf_x - x, 0),
    57                                                           self.QL,
    58                                                       ) * self.pdf_y,
    59     10070    2183384.0    216.8     99.4          ) for x in pv]
    60                                           
    61                                                   """
    62                                           
    63                                                   logging.debug('pv: ' + str(pv))
    64                                           
    65                                                   ev2 = np.zeros_like(pv, dtype=float)
    66                                           
    67                                                   for j, x in enumerate(pv):
    68                                           
    69                                                       x1 = np.maximum(pdf_x - x, 0)
    70                                                       logging.debug('x1: ' + str(x1))
    71                                                       x2 = np.minimum(x1, QL)
    72                                                       logging.debug('x2: ' + str(x2))
    73                                                       x3 = x2 * pdf_y
    74                                                       logging.debug('x3: ' + str(x3))
    75                                           
    76                                                       ev2[j] = np.sum(x3)
    77                                           
    78                                                   logging.debug('ev: ' + str(ev))
    79                                           
    80                                                   assert np.array_equiv(ev, ev2)
    81                                           
    82                                                   """
    83     10070       5111.0      0.5      0.2          return ev

Total time: 1.27251 s
File: /home/ubuntu/simulator/traders/CO1.py
Function: get_pv_and_rates at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                               @profile
    86                                               def get_pv_and_rates(self, ob: np.ndarray, is_buy: bool):
    87                                           
    88                                                   assert len(ob) > 0
    89                                                   assert ob.shape[1] == 2
    90                                           
    91     10070      23133.0      2.3      1.8          r = np.array(ob[:, 0])
    92     10070      10659.0      1.1      0.8          q = np.array(ob[:, 1])
    93                                           
    94     10070      28307.0      2.8      2.2          rates = r + self.tick if is_buy else r - self.tick
    95                                           
    96     10070     395534.0     39.3     31.1          pv = np.roll(np.cumsum(q), 1)
    97     10070       9782.0      1.0      0.8          pv[0] = 0
    98                                           
    99     10070       6833.0      0.7      0.5          mask = np.isin(
   100     10070      89379.0      8.9      7.0              np.around(rates, decimals=self.rate_precision),
   101     10070      49272.0      4.9      3.9              np.around(r, decimals=self.rate_precision),
   102     10070     639191.0     63.5     50.2              invert=True,
   103                                                   )
   104                                           
   105     10070      20422.0      2.0      1.6          return pv[mask], rates[mask]

Total time: 3.93465 s
File: /home/ubuntu/simulator/traders/CO1.py
Function: compute_orders at line 107

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   107                                               @profile
   108                                               def compute_orders(
   109                                                   self,
   110                                                   buyob: np.ndarray,
   111                                                   sellob: np.ndarray,
   112                                               ):
   113                                           
   114      5035       5786.0      1.1      0.1          start_time = time.time()
   115                                           
   116      5035       3216.0      0.6      0.1          try:
   117                                           
   118      5035      11180.0      2.2      0.3              market_rate: float = (buyob[0][0] + sellob[0][0]) / 2
   119                                           
   120      5035     745859.0    148.1     19.0              buypv, buyrates = self.get_pv_and_rates(ob=buyob, is_buy=True) 
   121      5035     618616.0    122.9     15.7              sellpv, sellrates = self.get_pv_and_rates(ob=sellob, is_buy=False)
   122                                           
   123                                                       if __debug__:
   124                                                           logging.debug('buypv:\n' + str(buypv))
   125                                                           logging.debug('buyrates:\n' + str(buyrates))
   126                                                           logging.debug('sellpv:\n' + str(sellpv))
   127                                                           logging.debug('sellrates:\n' + str(sellrates))
   128                                           
   129                                                       # an adjusted price for each order that factors in the fee
   130                                           
   131      5035      14397.0      2.9      0.4              buyrateswfee:  np.ndarray = buyrates / (1 - self.fee_rate)
   132                                           
   133      5035       9006.0      1.8      0.2              sellrateswfee = sellrates * (1 - self.fee_rate)
   134                                           
   135                                                       if __debug__:
   136                                                           logging.debug('buyrateswfee:\n' + str(buyrateswfee))
   137                                                           logging.debug('sellrateswfee:\n' + str(sellrateswfee))
   138                                           
   139      5035    1131357.0    224.7     28.8              buyev = self.evol(buypv)
   140                                           
   141      5035    1119687.0    222.4     28.5              sellev = self.evol(sellpv)
   142                                           
   143                                                       if __debug__:
   144                                                           logging.debug('buyev:\n' + str(buyev))
   145                                                           logging.debug('sellev:\n' + str(sellev))
   146                                           
   147                                                       # Get a matrix of the pairwise minimum 'evol' for all possible pairs
   148                                                       # of orders. The idea is that the lower of the two values creates
   149                                                       # a bottleneck, which is a notable innacuracy, though somewhat correct.
   150      5035      67627.0     13.4      1.7              minev = np.minimum.outer(buyev, sellev)
   151                                           
   152                                                       # get a matrix of profit margins for all possible order pairs
   153      5035       5361.0      1.1      0.1              profmarg = np.subtract.outer(
   154      5035      26370.0      5.2      0.7                  sellrateswfee, buyrateswfee).transpose()
   155                                           
   156                                                       # get the products of evol * (profit margin)
   157      5035      17001.0      3.4      0.4              expprofit = minev * profmarg
   158                                           
   159                                                       if __debug__:
   160                                                           logging.debug('minev:\n' + str(minev))
   161                                                           logging.debug('profmarg:\n' + str(profmarg))
   162                                                           logging.debug('expprofit:\n' + str(expprofit))
   163                                                           logging.debug('expprofit.max(): ' + str(expprofit.max()))
   164                                           
   165                                                       # If expected profit is <= 0, then cancel the current orders
   166      5035      37448.0      7.4      1.0              if expprofit.max() <= 0:
   167       209        165.0      0.8      0.0                  return [0, None, -1, -1]
   168                                           
   169                                                       else:
   170                                                           # select the best order pair(s)
   171      4826       3498.0      0.7      0.1                  best_orders = np.array(
   172      4826      70387.0     14.6      1.8                      np.where(expprofit == expprofit.max())
   173                                                           ).flatten()
   174                                           
   175                                                           assert len(best_orders) >= 2
   176                                                           assert len(buyrates) >= best_orders[0]
   177                                                           assert len(sellrates) >= best_orders[1]
   178                                           
   179      4826       7251.0      1.5      0.2                  buy_rate = buyrates[best_orders[0]]
   180      4826       4161.0      0.9      0.1                  sell_rate = sellrates[best_orders[1]]
   181                                           
   182      4826       3959.0      0.8      0.1                  return [0, None, buy_rate, sell_rate]
   183                                           
   184                                                   except Exception as err:
   185                                           
   186                                                       logging.exception(err)
   187                                                       raise
   188                                           
   189                                                   finally:
   190                                                       pass
   191      5035      29152.0      5.8      0.7              rounded_end = ('{0:.8f}'.format(round(time.time()-start_time, 8)))
   192                                           
   193      5035       3171.0      0.6      0.1              if __debug__:
   194                                                           logging.debug(
   195                                                               'Simulation Execution Time: %s seconds',
   196                                                               str(rounded_end))

